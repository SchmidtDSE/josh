plugins {
  id "java"
  id "eclipse" // optional (to generate Eclipse project files)
  id "idea" // optional (to generate IntelliJ IDEA project files)
  id "application" // for creating executable JARs
  id "checkstyle" // for code style checking
  id "antlr" // for ANTLR grammar
  id "org.openrewrite.rewrite" version "7.2.0" // Formatting for google style guide
  id "org.teavm" version "0.11.0" // TeaVM for WASM compilation
}

java {
  sourceCompatibility = JavaVersion.VERSION_19
  targetCompatibility = JavaVersion.VERSION_19
}

repositories {
  mavenCentral()
}

dependencies {
  // ANTLR dependencies
  antlr("org.antlr:antlr4:4.13.2") // The ANTLR tool for grammar processing
  implementation("org.antlr:antlr4-runtime:4.13.2") // ANTLR runtime for generated code
  
  // Rewrite dependencies
  rewrite("org.openrewrite:rewrite-java:7.46.0")
  rewrite("org.openrewrite.recipe:rewrite-static-analysis:2.4.0")
  
  // Testing dependencies
  testImplementation(platform("org.junit:junit-bom:5.12.1"))
  testImplementation("org.junit.jupiter:junit-jupiter")
  testImplementation("org.mockito:mockito-core:5.16.0")
  testRuntimeOnly("org.junit.platform:junit-platform-launcher")

  // Command line parsing
  implementation("info.picocli:picocli:4.7.6")
}

teavm {
  wasm {
    mainClass = "org.joshsim.JoshSimFacade"
  }
}

application {
  mainClass = "org.joshsim.JoshSimCommander"
}

// JUnit target for al tests.
test {
  useJUnitPlatform()
  testLogging {
    events "passed", "skipped", "failed"
  }
}

// Jar containing all dependencies required for production
task fatJar(type: Jar) {
  manifest {
    attributes(
      "Main-Class": "org.joshsim.JoshSim"
    )
  }
  archiveBaseName = "joshsim"
  archiveClassifier = "fat"
  
  // Include all dependencies
  from { 
    configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } 
  }
  
  // Include the main classes
  with jar
  
  // Exclude META-INF signatures to avoid security exceptions
  exclude "META-INF/*.RSA", "META-INF/*.SF", "META-INF/*.DSA"
}

// Standard JavaDoc target
javadoc {
  options {
    outputLevel = JavadocOutputLevel.QUIET
    encoding = "UTF-8"
    memberLevel = JavadocMemberLevel.PROTECTED
    links "https://docs.oracle.com/en/java/javase/11/docs/api/"
    windowTitle = "JoshLang"
  }
  
  destinationDir = file("${buildDir}/docs/javadoc")
}

// Shared configuration options for checkstyle
checkstyle {
  toolVersion = "10.21.4"
  configFile = file("${rootDir}/config/checkstyle/google_checks.xml")
  configDirectory = file("${rootDir}/config/checkstyle")
  maxErrors = 0
  maxWarnings = 0
  ignoreFailures = false
}

// Checkstyle target for main code
checkstyleMain {
  source = "src/main/java/org/joshsim"
}

// Checkstyle target for test code
checkstyleTest {
  source = "src/test/java/org/joshsim"
}

// Local formatting tool
rewrite {
  activeRecipe("org.openrewrite.staticanalysis.CodeCleanup")
  checkstyleConfigFile = file("${rootDir}/config/checkstyle/google_checks.xml")
}

// Create directory and checkstyle config if it doesn"t exist
task setupCheckstyle {
  doLast {
    def configDir = file("${rootDir}/config/checkstyle")
    configDir.mkdirs()
    def checksFile = new File(configDir, "google_checks.xml")
    if (!checksFile.exists()) {
      checksFile << new URL("https://raw.githubusercontent.com/checkstyle/checkstyle/master/src/main/resources/google_checks.xml").text
    }
  }
}

// ANTLR configuration
generateGrammarSource {
  // Set output directory for generated files
  outputDirectory = file("src-generated/main/java")
  
  // Set package for the generated visitor and other classes
  arguments += ["-visitor"]
  
  // To use direct left recursion
  arguments += ["-Dlanguage=Java"]
}

// Add generated sources to the compile path
sourceSets {
  main {
    java {
      srcDirs += file("src-generated/main/java")
    }
  }
}

// Make compileJava depend on generating ANTLR sources
compileJava.dependsOn generateGrammarSource

// Require Checkstyle set up before checing main.
checkstyleMain.dependsOn setupCheckstyle

// Require Checkstyle set up before checing test.
checkstyleTest.dependsOn setupCheckstyle
