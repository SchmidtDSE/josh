plugins {
    id 'java'
    id 'eclipse' // optional (to generate Eclipse project files)
    id 'idea' // optional (to generate IntelliJ IDEA project files)
    id 'application' // for creating executable JARs
    id 'checkstyle' // for code style checking
    id 'antlr' // for ANTLR grammar processing
}

repositories {
    mavenCentral()
}

dependencies {
    // ANTLR dependencies
    antlr('org.antlr:antlr4:4.13.1') // The ANTLR tool for grammar processing
    implementation('org.antlr:antlr4-runtime:4.13.1') // ANTLR runtime for generated code
    
    // Testing dependencies
    testImplementation(platform('org.junit:junit-bom:5.12.0'))
    testImplementation('org.junit.jupiter:junit-jupiter')
    testRuntimeOnly('org.junit.platform:junit-platform-launcher')
}

application {
    mainClass = 'org.joshsim.JoshSim'
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

task fatJar(type: Jar) {
    manifest {
        attributes(
            'Main-Class': 'org.joshsim.JoshSim'
        )
    }
    archiveBaseName = 'joshsim'
    archiveClassifier = 'fat'
    
    // Include all dependencies
    from { 
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } 
    }
    
    // Include the main classes
    with jar
    
    // Exclude META-INF signatures to avoid security exceptions
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
}

javadoc {
    options {
        outputLevel = JavadocOutputLevel.QUIET
        encoding = 'UTF-8'
        memberLevel = JavadocMemberLevel.PROTECTED
        links "https://docs.oracle.com/en/java/javase/11/docs/api/"
        windowTitle = "JoshLang"
    }
    
    destinationDir = file("${buildDir}/docs/javadoc")
}

checkstyle {
    toolVersion = '10.21.4'
    configFile = file("${rootDir}/config/checkstyle/google_checks.xml")
    configDirectory = file("${rootDir}/config/checkstyle")
    maxErrors = 0
    maxWarnings = 0
    ignoreFailures = false
}

checkstyleMain {
    source = 'src/main/java/org/joshsim'
}

checkstyleTest {
    source = 'src/test/java/org/joshsim'
}

// Create directory and checkstyle config if it doesn't exist
task setupCheckstyle {
    doLast {
        def configDir = file("${rootDir}/config/checkstyle")
        configDir.mkdirs()
        def checksFile = new File(configDir, "google_checks.xml")
        if (!checksFile.exists()) {
            checksFile << new URL("https://raw.githubusercontent.com/checkstyle/checkstyle/master/src/main/resources/google_checks.xml").text
        }
    }
}

// ANTLR configuration
generateGrammarSource {
    // Set output directory for generated files
    outputDirectory = file("src/main/java")
    
    // Set package for the generated visitor and other classes
    arguments += ["-visitor", "-package", "org.joshsim.lang"]
    
    // To use direct left recursion
    arguments += ["-Dlanguage=Java"]
}

// Make compileJava depend on generating ANTLR sources
compileJava.dependsOn generateGrammarSource

// Require Checkstyle set up before checing main.
checkstyleMain.dependsOn setupCheckstyle

// Require Checkstyle set up before checing test.
checkstyleTest.dependsOn setupCheckstyle
