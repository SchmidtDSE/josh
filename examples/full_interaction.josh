start unit cm

  m = current / 100

end unit


start unit years

  alias year
  alias yr
  alias yrs

end unit


start simulation Example

  grid.size = 30 m

end simulation


start patch Default

  location = all
  Shrubs.init = create 1 count of Shrubs
  TreeAs.init = create 1 count of TreeA
  TreeBs.init = create 1 count of TreeB

end patch


start organism Shrubs

  carryingCapacity.init = 80 %
  reproduction.init = 15% / year

  otherCover.step = {
    const treeACover = sum(here.TreeAs.cover)
    const treeBCover = sum(here.TreeBs.cover)
    const total = treeACover + treeBCover
    return limit total to [0%, 100%]
  }

  cover.init = sample normal with mean of 50% std of 10%
  cover.step
    :if(current.otherCover < 20%) = prior.cover + 10%
    :elif(current.otherCover < 40%) = prior.cover + 5%
    :elif(current.otherCover > 80%) = prior.cover - 10%
    :elif(current.otherCover > 60%) = prior.cover - 5%

  cover.end = limit current.cover to [, current.carryingCapacity]

end organism


start organism TreeA

  carryingCapacity.init = 90%

  age.init = 1 year
  age.step = prior.age + 10 year

  shade.start = sum(here.TreeBs[here.TreeBs.height > current.height].shade)
  cover.step = current.height / 5 m * 10 %

  growth.step = map current.age from [0 years, 100 years] to [10 m, 0 m] logrithmically
  growthLimit.step = current.growth * (100 % - current.shade) / 100 %

  height.step = prior.height + current.growthLimit

end organism


start organism TreeB

  carryingCapacity.init = 90%

  age.init = 1 year
  age.step = prior.age + 10 year

  growth.step = map curent.age from [0 years, 100 years] to [15 m, 0 m] logrithmically
  height.step = prior.height + growth
  cover.step = curent.height * 10 % / 3 m
  height.end = limit prior.height to [, 30 m]

end organism
