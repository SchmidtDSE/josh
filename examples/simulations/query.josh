start simulation Example

  grid.size = 1 count
  grid.start = 1 count latitude, 1 count longitude
  grid.end = 2 count latitude, 2 count longitude

  steps.start = 0 count
  steps.end = 100 count
 
  randSeed = 1234

  assert.seedDensity
    :if(meta.stepCount == 0) = max(all.seedDensity) == 0 count
    :if(meta.stepCount == 100) = max(all.seedDensity) > 0 count

end simulation


start patch Default

  location = all

  carryingCapacity.init = 100 count
  remainingRoom.step = current.carryingCapacity - count(current.QueryTrees)

  seedDensity.init = 0 count
  seedDensity.step = {
    const neighbors = QueryTrees within 30 m radial at prior
    const adultNeighbors = neighbors[neighbors.state == "adult"]
    return sum(adultNeighbors.seedCache) / 10% * 1 count
  }

  QueryTrees.init = create (sample normal with mean of 30 std of 10) of QueryTree
  QueryTrees.start = {
    const deadTrees = current.QueryTrees[current.QueryTrees.state == "dead"]
    return current.QueryTree - deadTrees
  }
  QueryTrees.step = {
    const newCount = floor(sample uniform from 0 count to current.seedDensity)
    const newCountCapped = limit newCount to [0 count, current.remainingRoom]
    const new = create newCountCapped of QueryTree
    return new + prior.QueryTrees
  }

  onFire.start = sample uniform from 0% to 100% < 5%

end patch


start organism QueryTree

  age.init
    :if(meta.stepCount == 0 count) = sample here.ObservedAges
    :else = 0 years

  age.step = prior.age + 1 year

  state.init
    :if(current.age > 30 years) = "adult"
    :elif(current.age > 2 years) = "juvenile"
    :elif(current.age > 0 years) = "seedling"
    :else = "seed"

  seedCache.init
    :if(current.age > 30 years) = current.age * (5% / 1 year)
    :else = 0%

  state.step:if(here.onFire and sample uniform from 0% to 100% < 90%) = "dead"

  start state "seed"

    state.step
      :if(sample uniform from 0% to 100% > 50%) = "seedling"
      :elif(sample uniform from 0% to 100% > 50%) = "dead"
      :elif(current.age > 3 years) = "dead"

  end state

  start state "seedling"

    state.step
      :if(sample uniform from 0% to 100% < 20%) = "dead"
      :elif(current.age > 2 years) = "juvenile"

  end state

  start state "juvenile"

    state.step
      :if(sample uniform from 0% to 100% < 10%) = "dead"
      :elif(current.age > 30 years) = "adult"

  end state

  start state "adult"

    seedCache.step = limit 1% + seedCache to [0%, 100%]
    state.step:if(sample uniform from 0% to 100% < 5%) = "dead"

  end state

end organism


start unit years

  alias year
  alias yr
  alias yrs

end unit
