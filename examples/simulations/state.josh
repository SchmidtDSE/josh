start simulation TestStateSimulation

  grid.size = 1 count
  grid.start = 1 count latitude, 1 count longitude
  grid.end = 2 count latitude, 2 count longitude

  steps.start = 0 count
  steps.end = 100 count

  randSeed = 1234

end simulation


start patch Default

  location = all

  SeedTree.init = create 100 count of LifeSeedTree
  SeedTree.end = here.SeedTree[here.SeedTree != "dead"]

  assert.seed
    :if(meta.stepCount == 0) = count(here.SeedTree[here.SeedTree.state == "seed"]) == 100 count
    :elif(meta.stepCount == 100) = count(here.SeedTree[here.SeedTree.state == "seed"]) > 0 count

  assert.seedling
    :if(meta.stepCount == 0) = count(here.SeedTree[here.SeedTree.state == "seedling"]) == 0 count
    :elif(meta.stepCount == 100) = count(here.SeedTree[here.SeedTree.state == "seedling"]) > 0 count

  assert.juvenile
    :if(meta.stepCount == 0) = count(here.SeedTree[here.SeedTree.state == "juvenile"]) == 0 count
    :elif(meta.stepCount == 100) = count(here.SeedTree[here.SeedTree.state == "juvenile"]) > 0 count
 
  assert.adult
    :if(meta.stepCount == 0) = count(here.SeedTree[here.SeedTree.state == "adult"]) == 0 count
    :elif(meta.stepCount == 100) = count(here.SeedTree[here.SeedTree.state == "adult"]) > 0 count

  assert.deleteDead
    :if(meta.stepCount == 0) = count(here.SeedTree) == 100 count
    :elif(meta.stepCount == 100) = count(here.SeedTree) < 100 count

end patch


start organism SeedTree

  age.init = 0 years

  age.step = prior.age + 1 year

  state.init
    :if(current.age > 30 years) = "adult"
    :elif(current.age > 2 years) = "juvenile"
    :elif(current.age > 0 years) = "seedling"
    :else = "seed"

  start state "seed"

    state.step
      :if(sample uniform from 0% to 100% > 50%) = "seedling"
      :elif(sample uniform from 0% to 100% > 50%) = "dead"
      :elif(current.age > 3 years) = "dead"

  end state

  start state "seedling"

    state.step
      :if(sample uniform from 0% to 100% < 20%) = "dead"
      :elif(current.age > 2 years) = "juvenile"

  end state

  start state "juvenile"

    state.step
      :if(sample uniform from 0% to 100% < 10%) = "dead"
      :elif(current.age > 30 years) = "adult"

  end state

  start state "adult"

    seedCache.step = limit 1% + seedCache to [0%, 100%]
    state.step:if(sample uniform from 0% to 100% < 5%) = "dead"

  end state

end organism


start unit year

  alias years
  alias yr
  alias yrs

end unit
