name: Build
on: [push]

jobs:
  buildSpec:
    environment: Build
    runs-on: ubuntu-latest
    name: Build Paper
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Update apt
        run: sudo apt-get update
      - name: Install LaTeX
        run: sudo apt-get install texlive-extra-utils texlive-fonts-recommended texlive-latex-base texlive-latex-extra
      - name: Get Pandoc
        run: wget https://github.com/jgm/pandoc/releases/download/3.1.10/pandoc-3.1.10-1-amd64.deb
      - name: Install Pandoc
        run: sudo dpkg -i pandoc-3.1.10-1-amd64.deb
      - name: Build paper
        run: pandoc -o spec.pdf --number-sections LanguageSpecification.md
      - name: Upload paper
        uses: actions/upload-artifact@v4
        with:
          name: spec
          path: spec.pdf
  buildJava:
    environment: Build
    runs-on: ubuntu-latest
    name: Build Fat Jar
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Build fat jar
        run: ./gradlew fatJar
      - name: Upload jar
        uses: actions/upload-artifact@v4
        with:
          name: fatJar
          path: build/libs/joshsim-fat.jar
  checkJava:
    needs: buildJava
    environment: Build
    runs-on: ubuntu-latest
    name: Static Checks
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Check grammar
        run: ./gradlew generateGrammarSource
      - name: Check main style
        run: ./gradlew checkstyleMain
      - name: Check test style
        run: ./gradlew checkstyleTest
  checkPython:
    environment: Build
    runs-on: ubuntu-latest
    name: Python Checks
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Test install
        run: cd joshpy; pip install .
      - name: Install optional
        run: cd joshpy; pip install .[dev]
      - name: Run pyflakes
        run: pyflakes joshpy/joshpy/*.py
      - name: Run tests
        run: cd joshpy && nose2
  testJava:
    needs: buildJava
    environment: Build
    runs-on: ubuntu-latest
    name: Test Java
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Update apt
        run: sudo apt-get update
      - name: Setup netCDF
        run: sudo apt-get install -y libnetcdf-dev
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Run tests
        run: ./gradlew test
  testPreprocessing:
    needs: buildJava
    environment: Build
    runs-on: ubuntu-latest
    name: Test Preprocessing and Create Tutorial Data
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Update apt
        run: sudo apt-get update
      - name: Setup netCDF
        run: sudo apt-get install -y libnetcdf-dev
      - name: Download fat jar
        uses: actions/download-artifact@v4
        with:
          name: fatJar
      - name: Setup environment
        run: |
          mkdir -p build/libs
          mv joshsim-fat.jar build/libs/
          chmod +x examples/test_basic_preprocess.sh
          chmod +x examples/test_spatial_preprocess.sh
          chmod +x landing/test_preprocess.sh
      - name: Run basic preprocessing tests
        run: bash examples/test_basic_preprocess.sh
      - name: Run spatial preprocessing tests
        run: bash examples/test_spatial_preprocess.sh
      - name: Run temporal preprocessing and create tutorial data
        run: bash landing/test_preprocess.sh
      - name: Upload preprocessed tutorial data
        uses: actions/upload-artifact@v4
        with:
          name: preprocessed-tutorial-data
          path: landing/preprocessed_data/
  validateExamples:
    needs: buildJava
    environment: Build
    runs-on: ubuntu-latest
    name: Validate Josh examples
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Download farJar artifact
        uses: actions/download-artifact@v4
        with:
          name: fatJar
      - name: Move artifact
        run: mkdir -p build/libs; mv joshsim-fat.jar build/libs/joshsim-fat.jar
      - name: Validate examples
        run: bash examples/validate.sh
  testOutputFormats:
    needs: [validateExamples, testPreprocessing]
    environment: Build
    runs-on: ubuntu-latest
    name: Test Output Formats (CSV, NetCDF, GeoTIFF)
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Update apt
        run: sudo apt-get update
      - name: Setup netCDF
        run: sudo apt-get install -y libnetcdf-dev
      - name: Download farJar artifact
        uses: actions/download-artifact@v4
        with:
          name: fatJar
      - name: Move artifact
        run: mkdir -p build/libs; mv joshsim-fat.jar build/libs/joshsim-fat.jar
      - name: Test output formats
        run: bash examples/test_output_formats.sh
  testGuideExamples:
    needs: [validateExamples, testPreprocessing]
    environment: Build
    runs-on: ubuntu-latest
    name: Test Guide Examples
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Update apt
        run: sudo apt-get update
      - name: Setup netCDF
        run: sudo apt-get install -y libnetcdf-dev
      - name: Download farJar artifact
        uses: actions/download-artifact@v4
        with:
          name: fatJar
      - name: Move artifact
        run: mkdir -p build/libs; mv joshsim-fat.jar build/libs/joshsim-fat.jar
      - name: Download preprocessed tutorial data
        uses: actions/download-artifact@v4
        with:
          name: preprocessed-tutorial-data
          path: ./landing/preprocessed_data/
      - name: Test guide examples
        run: bash examples/test_guide_examples.sh
  testConfiguration:
    needs: [validateExamples, testPreprocessing]
    environment: Build
    runs-on: ubuntu-latest
    name: Test Configuration Features
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Download farJar artifact
        uses: actions/download-artifact@v4
        with:
          name: fatJar
      - name: Move artifact
        run: mkdir -p build/libs; mv joshsim-fat.jar build/libs/joshsim-fat.jar
      - name: Test configuration
        run: bash examples/test_config.sh
  testAdditionalFeatures:
    needs: [validateExamples, testPreprocessing]
    environment: Build
    runs-on: ubuntu-latest
    name: Test Additional Features
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Update apt
        run: sudo apt-get update
      - name: Setup netCDF
        run: sudo apt-get install -y libnetcdf-dev
      - name: Download farJar artifact
        uses: actions/download-artifact@v4
        with:
          name: fatJar
      - name: Move artifact
        run: mkdir -p build/libs; mv joshsim-fat.jar build/libs/joshsim-fat.jar
      - name: Download preprocessed tutorial data
        uses: actions/download-artifact@v4
        with:
          name: preprocessed-tutorial-data
          path: ./landing/preprocessed_data/
      - name: Test external data with --data option
        run: bash examples/test_data_option.sh
      - name: Test job configuration template functionality
        run: bash examples/test_job_config.sh
  buildWeb:
    environment: Build
    needs: [ checkJava, buildJava, testJava, validateExamples, testOutputFormats, testGuideExamples, testConfiguration, testAdditionalFeatures, testPreprocessing ]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    name: Build for Browser
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Build war
        run: ./gradlew war
      - name: Update apt
        run: sudo apt-get update
      - name: Install wget
        run: sudo apt-get install -y wget
      - name: Load JS deps
        run: cd editor/third_party; bash install_deps.sh
      - name: Install landing deps
        run: cd landing; bash install_deps.sh
      - name: Optimize publicsans deployment
        run: |
          cd landing
          if [ -d "publicsans/fonts/otf" ]; then
            mkdir -p publicsans-minimal/fonts/otf
            cp publicsans/fonts/otf/PublicSans-Regular.otf publicsans-minimal/fonts/otf/
            rm -rf publicsans
            mv publicsans-minimal publicsans
          fi
      - name: Copy guide examples to landing
        run: |
          mkdir -p landing/examples/guide
          cp examples/guide/hello.josh landing/examples/guide/
          cp examples/guide/grass_shrub_fire.josh landing/examples/guide/
          cp examples/guide/two_trees.josh landing/examples/guide/
      - name: Upload war
        uses: actions/upload-artifact@v4
        with:
          name: war
          path: build/libs/JoshSim.war
      - name: Embed war
        run: bash editor/war/get_from_jar.sh
      - name: Build fat jar
        run: ./gradlew fatJar
      - name: Upload full jar
        uses: actions/upload-artifact@v4
        with:
          name: fullJar
          path: build/libs/joshsim-fat.jar
      - name: Upload editor
        uses: actions/upload-artifact@v4
        with:
          name: editor
          path: editor
      - name: Upload landing
        uses: actions/upload-artifact@v4
        with:
          name: landing
          path: landing
  deployStatic:
    environment: Deploy
    runs-on: ubuntu-latest
    name: Deploy to SFTP
    needs: [buildWeb, testPreprocessing]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    steps:
      - name: Set environment variables based on branch
        run: |
          if [[ $GITHUB_REF == refs/heads/main ]]; then
            echo "EDITOR_DIRECTORY=editor.joshsim.org" >> $GITHUB_ENV
            echo "LANDING_DIRECTORY=joshsim.org" >> $GITHUB_ENV
            echo "Deploying to production environment"
          else
            echo "EDITOR_DIRECTORY=editor.joshsim.org/dev" >> $GITHUB_ENV
            echo "LANDING_DIRECTORY=joshsim.org/dev" >> $GITHUB_ENV
            echo "Deploying to directory environment"
          fi
      - name: Set branch name
        id: branch
        run: |
          BRANCH=${GITHUB_REF#refs/heads/}
          echo "name=$BRANCH" >> $GITHUB_OUTPUT
      - name: Download fatJar artifact
        uses: actions/download-artifact@v4
        with:
          name: fullJar
          path: ./deploy
      - name: Download WASM artifact
        uses: actions/download-artifact@v4
        with:
          name: war
          path: ./deploy/war
      - name: Download preprocessed tutorial data
        uses: actions/download-artifact@v4
        with:
          name: preprocessed-tutorial-data
          path: ./tutorial-data-temp
      - name: Upload Jar via SFTP
        uses: Creepios/sftp-action@v1.0.3
        with:
          host: ${{ secrets.SFTPHOST }}
          port: 22
          username: ${{ secrets.SFTPUSER }}
          password: ${{ secrets.SFTPPASSWORD }}
          localPath: './deploy'
          remotePath: './joshsim.org/dist/${{ steps.branch.outputs.name }}'
      - name: Download editor
        uses: actions/download-artifact@v4
        with:
          name: editor
          path: ./editor-build
      - name: Checkout for llms.txt
        uses: actions/checkout@v3
        with:
          path: ./repo
      - name: Copy llms.txt to editor
        run: cp ./repo/llms.txt ./editor-build/
      - name: Upload Editor via SFTP
        uses: Creepios/sftp-action@v1.0.3
        with:
          host: ${{ secrets.SFTPHOST }}
          port: 22
          username: ${{ secrets.SFTPUSER }}
          password: ${{ secrets.SFTPPASSWORD }}
          localPath: './editor-build'
          remotePath: ${{ env.EDITOR_DIRECTORY }}
      - name: Download landing
        uses: actions/download-artifact@v4
        with:
          name: landing
          path: ./landing-build
      - name: Copy llms.txt to landing
        run: cp ./repo/llms.txt ./landing-build/
      - name: Organize tutorial data for guides
        run: |
          mkdir -p ./landing-build/guides/two_trees
          mkdir -p ./landing-build/guides/grass_shrub_fire
          cp ./tutorial-data-temp/temperatureTulare.jshd ./landing-build/guides/two_trees/
          cp ./tutorial-data-temp/precipitationTulare.jshd ./landing-build/guides/two_trees/
          cp ./tutorial-data-temp/precipitation_geotiff.jshd ./landing-build/guides/grass_shrub_fire/precipitation.jshd
      - name: Upload landing via SFTP
        uses: Creepios/sftp-action@v1.0.3
        with:
          host: ${{ secrets.SFTPHOST }}
          port: 22
          username: ${{ secrets.SFTPUSER }}
          password: ${{ secrets.SFTPPASSWORD }}
          localPath: './landing-build'
          remotePath: ${{ env.LANDING_DIRECTORY }}
  deployCloud:
    name: Deploy to Cloud
    environment: Deploy
    runs-on: ubuntu-latest
    needs: [buildWeb]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    steps:
      - name: Set environment variables based on branch
        run: |
          if [[ $GITHUB_REF == refs/heads/main ]]; then
            echo "SERVICE_NAME=josh-executor-prod" >> $GITHUB_ENV
            echo "DOCKERFILE=Dockerfile.prod" >> $GITHUB_ENV
            echo "Deploying to Production environment"
          else
            echo "SERVICE_NAME=josh-executor-dev" >> $GITHUB_ENV
            echo "DOCKERFILE=Dockerfile.dev" >> $GITHUB_ENV
            echo "Deploying to Development environment"
          fi
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
      - name: Download fatJar artifact
        uses: actions/download-artifact@v4
        with:
          name: fullJar
          path: ./cloud-img
      - name: Configure Docker
        run: gcloud auth configure-docker us-west1-docker.pkg.dev
      - name: Build and Push Docker image
        run: |
          # Build from the directory containing the Dockerfile
          docker build -t us-west1-docker.pkg.dev/${{ secrets.PROJECT_ID }}/docker-repo/${{ env.SERVICE_NAME }}:${{ github.sha }} -f cloud-img/${{ env.DOCKERFILE }} cloud-img
          docker push us-west1-docker.pkg.dev/${{ secrets.PROJECT_ID }}/docker-repo/${{ env.SERVICE_NAME }}:${{ github.sha }}
      - name: Deploy to Cloud Run
        id: deploy
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --region=${{ secrets.REGION }} \
            --image=us-west1-docker.pkg.dev/${{ secrets.PROJECT_ID }}/docker-repo/${{ env.SERVICE_NAME }}:${{ github.sha }} \
            --memory=16Gi \
            --cpu=6 \
            --min-instances=0 \
            --max-instances=100 \
            --port=8085 \
            --allow-unauthenticated \
            --set-secrets="JOSH_API_KEYS=${{ secrets.SECRET_NAME }}" \
            --use-http2 \
            --concurrency=1 \
            --timeout=3600s
