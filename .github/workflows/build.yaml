name: Build
on: [push]

jobs:
  buildSpec:
    environment: Build
    runs-on: ubuntu-latest
    name: Build Paper
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Update apt
        run: sudo apt-get update
      - name: Install LaTeX
        run: sudo apt-get install texlive-extra-utils texlive-fonts-recommended texlive-latex-base texlive-latex-extra
      - name: Get Pandoc
        run: wget https://github.com/jgm/pandoc/releases/download/3.1.10/pandoc-3.1.10-1-amd64.deb
      - name: Install Pandoc
        run: sudo dpkg -i pandoc-3.1.10-1-amd64.deb
      - name: Build paper
        run: pandoc -o spec.pdf --number-sections LanguageSpecification.md
      - name: Upload paper
        uses: actions/upload-artifact@v4
        with:
          name: spec
          path: spec.pdf
  buildJava:
    environment: Build
    runs-on: ubuntu-latest
    name: Build Fat Jar
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Build fat jar
        run: ./gradlew fatJar
      - name: Upload jar
        uses: actions/upload-artifact@v4
        with:
          name: fatJar
          path: build/libs/joshsim-fat.jar
  checkJava:
    needs: buildJava
    environment: Build
    runs-on: ubuntu-latest
    name: Static Checks
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Check grammar
        run: ./gradlew generateGrammarSource
      - name: Check main style
        run: ./gradlew checkstyleMain
      - name: Check test style
        run: ./gradlew checkstyleTest
  testJava:
    needs: buildJava
    environment: Build
    runs-on: ubuntu-latest
    name: Test Java
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Run tests
        run: ./gradlew test
  validateExamples:
    needs: buildJava
    environment: Build
    runs-on: ubuntu-latest
    name: Validate Josh examples
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Download farJar artifact
        uses: actions/download-artifact@v4
        with:
          name: fatJar
      - name: Move artifact
        run: mkdir -p build/libs; mv joshsim-fat.jar build/libs/joshsim-fat.jar
      - name: Validate examples
        run: bash examples/validate.sh
  runTests:
    needs: validateExamples
    environment: Build
    runs-on: ubuntu-latest
    name: Run Josh examples
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Download farJar artifact
        uses: actions/download-artifact@v4
        with:
          name: fatJar
      - name: Move artifact
        run: mkdir -p build/libs; mv joshsim-fat.jar build/libs/joshsim-fat.jar
      - name: Run examples
        run: bash examples/test.sh
  buildWeb:
    environment: Build
    runs-on: ubuntu-latest
    name: Build for Browser
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Build war
        run: ./gradlew war
      - name: Update apt
        run: sudo apt-get update
      - name: Install wget
        run: sudo apt-get install -y wget
      - name: Load JS deps
        run: cd editor/third_party; bash install_deps.sh
      - name: Upload war
        uses: actions/upload-artifact@v4
        with:
          name: war
          path: build/libs/JoshSim.war
      - name: Embed war
        run: bash editor/war/get_from_jar.sh
      - name: Build fat jar
        run: ./gradlew fatJar
      - name: Upload full jar
        uses: actions/upload-artifact@v4
        with:
          name: fullJar
          path: build/libs/joshsim-fat.jar
      - name: Upload editor
        uses: actions/upload-artifact@v4
        with:
          name: editor
          path: editor
  deployStatic:
    environment: Deploy
    runs-on: ubuntu-latest
    name: Deploy to SFTP
    needs: [buildWeb]
    steps:
      - name: Set branch name
        id: branch
        run: |
          BRANCH=${GITHUB_REF#refs/heads/}
          echo "name=$BRANCH" >> $GITHUB_OUTPUT
      - name: Download fatJar artifact
        uses: actions/download-artifact@v4
        with:
          name: fullJar
          path: ./deploy
      - name: Download WASM artifact
        uses: actions/download-artifact@v4
        with:
          name: war
          path: ./deploy/war
      - name: Upload Jar via SFTP
        uses: Creepios/sftp-action@v1.0.3
        with:
          host: ${{ secrets.SFTPHOST }}
          port: 22
          username: ${{ secrets.SFTPUSER }}
          password: ${{ secrets.SFTPPASSWORD }}
          localPath: './deploy'
          remotePath: './joshsim.org/dist/${{ steps.branch.outputs.name }}'
      - name: Download editor
        uses: actions/download-artifact@v4
        with:
          name: editor
          path: ./editor-build
      - name: Unzip editor
        run: cd editor-build; unzip editor.zip
      - name: Upload Editor via SFTP
        uses: Creepios/sftp-action@v1.0.3
        with:
          host: ${{ secrets.SFTPHOST }}
          port: 22
          username: ${{ secrets.SFTPUSER }}
          password: ${{ secrets.SFTPPASSWORD }}
          localPath: './editor-build/index.html'
          remotePath: './editor.joshsim.org'
      - name: Upload JS via SFTP
        uses: Creepios/sftp-action@v1.0.3
        with:
          host: ${{ secrets.SFTPHOST }}
          port: 22
          username: ${{ secrets.SFTPUSER }}
          password: ${{ secrets.SFTPPASSWORD }}
          localPath: './editor-build/js'
          remotePath: './editor.joshsim.org'
      - name: Upload style via SFTP
        uses: Creepios/sftp-action@v1.0.3
        with:
          host: ${{ secrets.SFTPHOST }}
          port: 22
          username: ${{ secrets.SFTPUSER }}
          password: ${{ secrets.SFTPPASSWORD }}
          localPath: './editor-build/style'
          remotePath: './editor.joshsim.org'
      - name: Upload third party via SFTP
        uses: Creepios/sftp-action@v1.0.3
        with:
          host: ${{ secrets.SFTPHOST }}
          port: 22
          username: ${{ secrets.SFTPUSER }}
          password: ${{ secrets.SFTPPASSWORD }}
          localPath: './editor-build/third_party'
          remotePath: './editor.joshsim.org'
      - name: Upload war via SFTP
        uses: Creepios/sftp-action@v1.0.3
        with:
          host: ${{ secrets.SFTPHOST }}
          port: 22
          username: ${{ secrets.SFTPUSER }}
          password: ${{ secrets.SFTPPASSWORD }}
          localPath: './editor-build/war'
          remotePath: './editor.joshsim.org'
  deployCloud:
    name: Deploy to Cloud
    environment: Deploy
    runs-on: ubuntu-latest
    needs: [buildWeb]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
      - name: Download fatJar artifact
        uses: actions/download-artifact@v4
        with:
          name: fullJar
          path: ./cloud-img
      - name: Set environment variables based on branch
        run: |
          if [[ $GITHUB_REF == refs/heads/main ]]; then
            echo "SERVICE_NAME=josh-executor-prod" >> $GITHUB_ENV
            echo "DOCKERFILE=Dockerfile.prod" >> $GITHUB_ENV
            echo "Deploying to Production environment"
          else
            echo "SERVICE_NAME=josh-executor-dev" >> $GITHUB_ENV
            echo "DOCKERFILE=Dockerfile.dev" >> $GITHUB_ENV
            echo "Deploying to Development environment"
          fi
      - name: Configure Docker
        run: gcloud auth configure-docker us-docker.pkg.dev
      - name: Build and Push Docker image
        run: |
          # Build from the directory containing the Dockerfile
          docker build -t us-docker.pkg.dev/${{ secrets.PROJECT_ID }}/docker-repo/${{ env.SERVICE_NAME }}:${{ github.sha }} -f cloud-img/${{ env.DOCKERFILE }} cloud-img
          docker push us-docker.pkg.dev/${{ secrets.PROJECT_ID }}/docker-repo/${{ env.SERVICE_NAME }}:${{ github.sha }}
      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: ${{ env.SERVICE_NAME }}
          region: ${{ secrets.REGION }}
          image: us-docker.pkg.dev/${{ secrets.PROJECT_ID }}/docker-repo/${{ env.SERVICE_NAME }}:${{ github.sha }}
          flags: |
            --memory=32Gi
            --cpu=8
            --min-instances=0
            --max-instances=100
            --port=8085
            --allow-unauthenticated
            --set-secrets="JOSH_API_KEYS=${{ env.SECRET_NAME }}"
            --http2
            --concurrency=2
            --timeout=3600
